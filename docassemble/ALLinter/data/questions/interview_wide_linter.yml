---
mandatory: True
code: |
  yaml_file
  results
---
imports:
  - ruamel.yaml
  - mako.runtime
  - textstat.textstat
  - docassemble.webapp.screenreader
---
modules:
  - .linter
---
question: |
  Upload a yaml file
fields:
  - Yaml file: yaml_file
    datatype: file
---
code: |
  yaml_parsed = load_interview(yaml_file.slurp())
---
code: |
  # identify all questions that set a variable in the interview
  interview_texts = get_all_text(yaml_parsed)
  headings = get_all_headings(yaml_parsed)
---
code: |
  mako.runtime.UNDEFINED = DAEmpty()

  interview_texts_no_mako = [remove_mako(text) for text in interview_texts]
  headings = {key: remove_mako(text) for key, text in headings.items()}
---
code: |
  paragraph_temp = ''
  for text in interview_texts_no_mako:
    paragraph_temp += text
  paragraph = paragraph_temp
  del paragraph_temp
---
code: |
  interview_scores = {score_name: score_func(paragraph) for score_name, score_func in [('Flesch Reading Ease', textstat.textstat.flesch_reading_ease),
               ('Flesch-Kincaid Grade Level', textstat.flesch_kincaid_grade),
               ('Gunning FOG Scale', textstat.gunning_fog),
               ('SMOG Index', textstat.smog_index),
               ('Automated Readability Index', textstat.automated_readability_index),
               ('Coleman-Liau Index', textstat.coleman_liau_index),
               ('Linsear Write Formula', textstat.linsear_write_formula),
               ('Dale-Chall Readability Score', textstat.dale_chall_readability_score),
               ('Readability Consensus', textstat.text_standard)]}
---
code: |
  headings_warnings = headings_violations(headings)
---
code: |
  warnings = text_violations(interview_texts_no_mako)
---
code: |
  misspelled = get_misspelled_words(paragraph)
---
event: results
question: |
  Interview Suggestions
subquestion: |
  ### Readability
  
  % for key, val in interview_scores.items():
  * ${ key } : ${ val }
  % endfor
  
  % if misspelled:
  ### Misspelled words
  
  It looks like these words are misspelled:
  
  % for misspelled_word in misspelled:
  * ${ misspelled_word }
  % endfor  
  % endif
  
  % if headings_warnings or warnings:
  ### Warnings:
  
  % for warning in headings_warnings:
  * ${ warning }
  % endfor
  
  % for warning in warnings:
  % if isinstance(warning, tuple):
  * ${ warning[0] } [Read more](${warning[1]})
  % else:
  * ${ warning }
  % endif
  % endfor
  
  % endif
  
  
help:
  label: |
    Text used
  content: |
    % for text in interview_texts:
  
    ${ text }
  
    ---
    <br>
    % endfor